{"version":3,"sources":["LifeCycleSample.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["LifeCycleSample","props","state","number","color","myRef","handleClick","setState","console","log","nextProps","nextState","prevProps","prevState","this","style","snapshot","ref","onClick","Component","ErrorBoundary","error","info","children","getRandomColor","Math","floor","random","toString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"qNA2EeA,E,kDAjEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IARRC,MAAQ,CACNC,OAAQ,EACRC,MAAO,MAKU,EAFnBC,MAAQ,KAEW,EA0BnBC,YAAc,WACZ,EAAKC,SAAS,CACZJ,OAAQ,EAAKD,MAAMC,OAAS,KA1B9BK,QAAQC,IAAI,eAFK,E,iEAcjBD,QAAQC,IAAI,wB,4CAGQC,EAAWC,GAE/B,OADAH,QAAQC,IAAI,wBAAyBC,EAAWC,GACzCA,EAAUR,OAAS,KAAO,I,6CAIjCK,QAAQC,IAAI,0B,8CASUG,EAAWC,GAEjC,OADAL,QAAQC,IAAI,0BAA2BG,EAAWC,GAC9CD,EAAUR,QAAUU,KAAKb,MAAMG,MAC1BU,KAAKT,MAAMU,MAAMX,MAEnB,O,yCAGUQ,EAAWC,EAAWG,GACvCR,QAAQC,IAAI,qBAAsBG,EAAWC,EAAWG,GACpDA,GACFR,QAAQC,IAAI,kEAAiBO,K,+BAIvB,IAAD,OACPR,QAAQC,IAAI,UACZ,IAAMM,EAAQ,CACZX,MAAOU,KAAKb,MAAMG,OAEpB,OACE,6BAEE,wBAAIW,MAAOA,EAAOE,IAAK,SAACA,GAAD,OAAU,EAAKZ,MAAQY,IAC3CH,KAAKZ,MAAMC,QAEd,qCAAWW,KAAKZ,MAAME,OACtB,4BAAQc,QAASJ,KAAKR,aAAtB,0B,gDAtD0BI,EAAWG,GAEzC,OADAL,QAAQC,IAAI,2BAA4BC,EAAWG,GAC/CH,EAAUN,QAAUS,EAAUT,MACzB,CAAEA,MAAOM,EAAUN,OAErB,S,GAlBmBe,aCiBfC,E,4MAhBblB,MAAQ,CACNmB,OAAO,G,gEAGSA,EAAOC,GACvBR,KAAKP,SAAS,CACZc,OAAO,IAETb,QAAQC,IAAI,CAAEY,QAAOC,W,+BAGrB,OAAIR,KAAKZ,MAAMmB,MAAc,yFACtBP,KAAKb,MAAMsB,a,GAbMJ,aCE5B,SAASK,IACP,MAAO,IAAMC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,I,IA0B9CC,E,4MAtBb3B,MAAQ,CACNE,MAAO,W,EAGTE,YAAc,WACZ,EAAKC,SAAS,CACZH,MAAOoB,O,uDAKT,OACE,6BACE,4BAAQN,QAASJ,KAAKR,aAAtB,4BACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAiBF,MAAOU,KAAKZ,MAAME,c,GAhB3Be,aCIEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzB,GACLb,QAAQa,MAAMA,EAAM0B,a","file":"static/js/main.4cd5e3ff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass LifeCycleSample extends Component {\r\n  state = {\r\n    number: 0,\r\n    color: null,\r\n  };\r\n\r\n  myRef = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\"constructor\");\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    console.log(\"getDerivedStateFromProps\", nextProps, prevState);\r\n    if (nextProps.color !== prevState.color) {\r\n      return { color: nextProps.color };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  componendtDidMount() {\r\n    console.log(\"componendtDidMount\");\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log(\"shouldComponentUpdate\", nextProps, nextState);\r\n    return nextState.number % 10 !== 4;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log(\"componentWillUnmount\");\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({\r\n      number: this.state.number + 1,\r\n    });\r\n  };\r\n\r\n  getSnapshotBeforeUpdate(prevProps, prevState) {\r\n    console.log(\"getSnapshotBeforeUpdate\", prevProps, prevState);\r\n    if (prevProps.color !== this.props.color) {\r\n      return this.myRef.style.color;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    console.log(\"componentDidUpdate\", prevProps, prevState, snapshot);\r\n    if (snapshot) {\r\n      console.log(\"업데이트되기 직전 색상:\", snapshot);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(\"render\");\r\n    const style = {\r\n      color: this.props.color,\r\n    };\r\n    return (\r\n      <div>\r\n        {/* {this.props.missing.value} */}\r\n        <h1 style={style} ref={(ref) => (this.myRef = ref)}>\r\n          {this.state.number}\r\n        </h1>\r\n        <p>color: {this.state.color}</p>\r\n        <button onClick={this.handleClick}>더하기</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LifeCycleSample;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({\r\n      error: true,\r\n    });\r\n    console.log({ error, info });\r\n  }\r\n  render() {\r\n    if (this.state.error) return <div>에러가 발생했습니다.</div>;\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\nimport LifeCycleSample from \"./LifeCycleSample\";\nimport ErrorBoundary from \"./ErrorBoundary\";\n\nfunction getRandomColor() {\n  return \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n}\n\nclass App extends Component {\n  state = {\n    color: \"#000000\",\n  };\n\n  handleClick = () => {\n    this.setState({\n      color: getRandomColor(),\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>랜덤색상</button>\n        <ErrorBoundary>\n          <LifeCycleSample color={this.state.color} />\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}